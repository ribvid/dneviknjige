/*
  Global styles

  Low-specificity, global styles that apply to the whole
  project: https://cube.fyi/css.html
*/

body {
  background: var(--bg-body);
  color: var(--body-text-color, var(--color-black));
  font-size: var(--size-step-0);
  font-family: var(--font-base);
  line-height: var(--leading-relaxed);
  letter-spacing: var(--tracking-normal);
  margin: 0;
  -webkit-font-smoothing: antialiased;
}

:is(h1, h2, h3, h4, h5, h6) {
  color: var(--heading-text-color, var(--color-black));
}

:is(h1, h2, h3, h4) {
  text-wrap: balance;
}

:is(h2, h3, h4, h5, h6) {
  line-height: var(--leading-tight);
}

h1 {
  font-family: var(--font-sans);
  font-size: var(--size-step-4);
  max-width: 35ch;
  font-weight: var(--font-bold);
  line-height: var(--leading-snug);
}

h2 {
  font-size: var(--size-step-2);
  max-width: 40ch;
  font-weight: var(--font-bold);
  font-family: var(--font-sans);
}

h3 {
  font-size: var(--size-step-1);
  max-width: 45ch;
  font-weight: var(--font-bold);
  font-family: var(--font-sans);
}

:is(h4, h5, h6) {
  font-size: var(--size-step-0);
  font-weight: var(--font-bold);
  font-family: var(--font-sans);
}

small {
  font-size: var(--size-step-00);
}

ins {
  text-decoration: none;
  border: var(--stroke-solid);
  padding-inline: 0.3em;
}

:is(code, kbd, samp) {
  font-family: var(--font-mono);
  padding: 0.2em 0.2em 0.05em 0.2em;
  hyphens: none;
  tab-size: 2;
  text-align: left;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  box-decoration-break: clone;
}

/* This is quite a new property, so we want code styles to at least, not be huge or tiny */
@supports not (font-size-adjust: from-font) {
  :is(code, kbd, samp) {
    font-size: 0.8em;
  }
}

pre:has(code) {
  width: max-content;
  max-width: 100%;
  overflow-x: auto;
}

pre code {
  border: none;
  background: none;
  padding: 0;
}

kbd {
  border: 1px solid;
  padding-block-end: 0.1em;
}

var {
  font-style: normal;
  font-weight: var(--font-bold);
}

q {
  font-style: italic;
}

ul {
  padding-inline-start: 2ch;
  list-style-type: disc;
}

ol {
  padding-inline-start: 2.2ch;
  list-style-type: decimal;
}

:is(ol, ul):not([class]) > li {
  padding-inline-start: 0px;
}

:is(ol, ul):not([class]) li + * {
  margin-block-start: var(--flow-space, var(--space-3xs));
}

ul ::marker {
  font-size: 0.8lh;
}

ol ::marker {
  font-size: 1em;
}

/* Lists with roles will be out of standard flow, so remove the default spacing */
[role='list'],
[role='tablist'] {
  margin-block: 0;
  padding: 0;
}

dt {
  font-weight: var(--font-bold);
}

dt + dd {
  margin-block-start: var(--space-3xs);
}

dd + dt {
  margin-block-start: var(--space-s);
}

dd {
  margin-inline-start: 1.5ch;
}

dd + dd {
  margin-block-start: var(--space-3xs);
}

blockquote {
  margin-inline: 0;
  border-inline-start: 8px solid var(--color-gray);
  padding-inline-start: var(--space-m);
  padding-block: var(--space-2xs);
}

blockquote footer {
  margin-block-start: var(--space-s);
  font-size: var(--size-step-00);
  color: var(--color-dark-gray);
}

blockquote q {
  font-style: normal;
}

:is(video, iframe[src*='youtube'], iframe[src*='vimeo']) {
  display: block;
  width: 100%;
  height: auto;
  aspect-ratio: 16/9;
}

img {
  height: auto;
  max-width: 100%;
  display: block;
}

figcaption {
  padding-block-start: 0.25em;
  font-size: var(--size-step-0);
  font-style: italic;
}

table {
  border: var(--stroke);
  border-collapse: collapse;
  width: 100%;
}

th {
  text-align: left;
  font-weight: var(--font-bold);
  line-height: var(--leading-tight);
}

thead th {
  padding-block: var(--space-xs);
}

td,
th {
  padding: var(--space-2xs) var(--space-xs);
}

th:not(:only-of-type) {
  border-block-end: var(--stroke);
}

th:only-of-type {
  border-inline-end: var(--stroke);
}

:is(th, td) ~ :is(th, td) {
  border-inline-start: var(--stroke);
}

tr + tr :is(th, td) {
  border-block-start: var(--stroke);
}

caption {
  caption-side: bottom;
  margin-block-start: var(--space-2xs);
  font-size: var(--size-step-00);
  font-style: italic;
}

a:not([class]) {
  text-underline-offset: 0.1lh;
}

a:not([class]):hover {
  text-underline-offset: 0.13lh;
}

:is(h1, h2, h3, h4) a:not([class]) {
  text-decoration-thickness: 0.1ex;
  text-underline-offset: 0.2ex;
  color: inherit;
}

:is(h1, h2, h3, h4) a:not([class]):hover {
  text-underline-offset: 0.3ex;
}

:focus {
  outline: none;
}

:focus-visible {
  outline: 2px solid var(--focus-color, currentColor);
  outline-offset: var(--focus-offset, 0.2lh);
}

/* Firefox is the only browser that doesn't outline the whole element unless you make it display: inline-block. That in itself causes multiple flow issues so we can detect it, using its own vendor prefix and reduce focus offset
*/
@supports (-moz-appearance: none) {
  :root {
    --focus-offset: 0.08em;
  }
}

:target {
  scroll-margin-block: 5lh;
}

::selection {
  color: var(--color-white);
  background: var(--color-black);
}

hr {
  border: none;
  border-block-start: var(--stroke);
  margin-block: var(--flow-space, var(--space-xl));
}

svg:not([class]) {
  width: auto;
  height: 2ex;
  height: 1lh;
}

svg {
  flex-shrink: 0;
}

svg[role='img'][width][height] {
  width: revert;
  height: revert;
  padding: var(--space-xs);
}

/* There's a .flow composition, but this prevents forms from having to have that applied where markup is harder to control in certain systems. It still uses the --flow-space variables though to make managing space easier */
form > * + * {
  margin-top: var(--flow-space, 1rem);
}

:is(input, select, textarea) {
  accent-color: var(--color-black);
}

:is(input:not([type='checkbox'], [type='radio'], [type='color']), select, textarea) {
  padding: 0.5em 0.8em;
  border-radius: var(--radius-s);
  border: var(--stroke);
  background: transparent;
  width: 100%;

  &::placeholder {
    color: var(--color-gray);
    opacity: 1;
  }
}

label {
  line-height: var(--leading-tight);
  font-size: var(--size-step-00);
}

label::after {
  content: '\A';
  white-space: pre;
}

/* Usually label wraps checkbox and radio buttons, so we give ourselves more layout and text-flow control with flex */
label:has(input) {
  display: flex;
  align-items: baseline;
  gap: var(--space-2xs);
  font-weight: var(--font-regular);
  font-size: var(--size-step-0);
}

label:has(input) + label:has(input) {
  margin-block-start: var(--space-xs);
}

/* Slightly adjusts the vertical position of the check/radio */
label:has(input) input {
  transform: translateY(0.1ex);
}

input:disabled {
  background: var(--color-light-gray);
}

input:disabled,
label input:disabled + * {
  cursor: not-allowed;
}

fieldset {
  border: var(--stroke);
  padding: var(--space-xs);
}

legend {
  font-style: italic;
  padding-inline: var(--space-2xs);
  font-size: var(--size-step-00);
}

summary {
  font-weight: var(--font-bold);
  cursor: pointer;
}

details[open] summary {
  margin-block-end: var(--space-2xs);
}

[hidden] {
  display: none;
}

#app {
  display: flex;
  min-height: 100vh;
  flex-direction: column;
  justify-content: flex-start;
}

main {
  flex-grow: 1;
}

body.has-active-festival.page-template-template-frontpage main {
  display: flex;
  flex-direction: column;
  justify-content: center;
}
